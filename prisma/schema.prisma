generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password
  points        Int       @default(1000)
  isAdmin       Boolean   @default(false)
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  accounts      Account[]
  sessions      Session[]
  cards         UserCard[]
  shippingRequests ShippingRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  rarity      String // e.g., "N", "R", "SR", "SSR"

  oripaCards OripaCard[]
  userCards  UserCard[]
}

model Oripa {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())

  cards OripaCard[]
}

model OripaCard {
  id      String @id @default(cuid())
  oripa   Oripa  @relation(fields: [oripaId], references: [id], onDelete: Cascade)
  oripaId String
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId  String

  @@unique([oripaId, cardId])
}

model ShippingRequest {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        String    @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  requestDate   DateTime  @default(now())
  shippingAddress String // Denormalized address at time of request
  shippedDate   DateTime?
  trackingNumber String?

  userCards UserCard[]
}

model UserCard {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    String
  createdAt DateTime @default(now())

  shippingRequest   ShippingRequest? @relation(fields: [shippingRequestId], references: [id])
  shippingRequestId String? // Nullable, only set if part of a shipping request
  isShipped         Boolean @default(false)

  @@index([userId])
  @@index([cardId])
  @@index([shippingRequestId])
}